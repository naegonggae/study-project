# github repository Actions 페이지에 나타낼 이름
name: CI/CD

# event trigger
on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # https://github.com/actions/setup-java

      ## gradle caching
#      - name: Gradle Caching
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-

      ## create application-dev.properties
      - name: make application.yml
        if: contains(github.ref, 'main')
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.PROPERTIES_YML }}" > ./application.yml
        shell: bash

      ## create firebase-key.json
#      - name: create firebase key
#        run: |
#          cd ./src/main/resources
#          ls -a .
#          touch ./firebase-service-key.json
#          echo "${{ secrets.FIREBASE_KEY }}" > ./firebase-service-key.json
#        shell: bash

#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      ## gradle build
      - name: Build with Gradle
        run: |
          ./gradlew wrapper
          ./gradlew build -x test

      ## docker build & push to production
      - name: Docker build & push to prod
#        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
      ## 위치 잘못된거 아닌가

      ## deploy to production
#      - name: Deploy to prod
#        uses: appleboy/ssh-action@master
#        id: deploy-prod
#        if: contains(github.ref, 'main')
#        with:
#          host: ${{ secrets.HOST_PROD }}
#          username: ec2-user
#          key: ${{ secrets.PRIVATE_KEY }}
#          envs: GITHUB_SHA
#          script: |
#            sudo docker rm -f $(docker ps -qa)
#            sudo docker pull ${{ secrets.DOCKER_REPO }}/dotoriham-prod
#            docker-compose up -d
#            docker image prune -f

      ## deploy to develop
#      - name: Deploy to main
#        uses: appleboy/ssh-action@master
#        id: deploy-dev
##        if: contains(github.ref, 'develop')
#        with:
#          username: ubuntu
#          host: ${{ secrets.HOST_DEV }}
#          key: ${{secrets.EC2_KEY}}
##          username: ${{ secrets.USERNAME }}
##          password: ${{ secrets.PASSWORD }}
##          port: 22
#          #무슨 아이디 비번이지
#          #key: ${{ secrets.PRIVATE_KEY }}
#          script: |
#            sudo docker rm -f $(docker ps -qa)
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
##            docker-compose up -d
#            docker run -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
#            docker image prune -f

#  ## time
#  current-time:
#    needs: CI-CD
#    runs-on: ubuntu-latest
#    steps:
#      - name: Get Current Time
#        uses: 1466587594/get-current-time@v2
#        id: current-time
#        with:
#          format: YYYY-MM-DDTHH:mm:ss
#          utcOffset: "+09:00" # 기준이 UTC이기 때문에 한국시간인 KST를 맞추기 위해 +9시간 추가
#
#      - name: Print Current Time
#        run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
#        shell: bash
#
#  ## slack
#  action-slack:
#    needs: CI-CD
#    runs-on: ubuntu-latest
#    steps:
#      - name: Slack Alarm
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          author_name: GitHub-Actions CI/CD
#          fields: repo,message,commit,author,ref,job,took
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
#        if: always() # Pick up events even if the job fails or is canceled.